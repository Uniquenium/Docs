import{_ as e,c as a,o,ae as r}from"./chunks/framework.Cd-3tpCq.js";const b=JSON.parse('{"title":"UniDeskData","description":"","frontmatter":{"title":"UniDeskData","editLink":true},"headers":[],"relativePath":"zh/controls-reference/singletons/UniDeskSettings.md","filePath":"zh/controls-reference/singletons/UniDeskSettings.md"}'),i={name:"zh/controls-reference/singletons/UniDeskSettings.md"};function l(d,t,s,n,p,h){return o(),a("div",null,t[0]||(t[0]=[r('<h1 id="unidesksettings-类型" tabindex="-1">UniDeskSettings 类型 <a class="header-anchor" href="#unidesksettings-类型" aria-label="Permalink to &quot;UniDeskSettings 类型&quot;">​</a></h1><p>本单项用于存储一些不直接被记录在设置文件中的全局变量</p><table tabindex="0"><thead><tr><th>控件类型</th><th>抽象单项</th></tr></thead><tbody><tr><td>源代码文件路径</td><td><code>main/UniDeskData.py</code></td></tr><tr><td>继承</td><td><a href="https://doc.qt.io/qt-6.8/qml-qtquick-item.html" target="_blank" rel="noreferrer">QtQuick Item</a></td></tr></tbody></table><h2 id="访问" tabindex="-1">访问 <a class="header-anchor" href="#访问" aria-label="Permalink to &quot;访问&quot;">​</a></h2><div class="language-qml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">qml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">UniDeskSettings.&lt;变量名&gt;</span></span></code></pre></div><h2 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h2><h3 id="property-bool-hidetaskbar" tabindex="-1"><code>property bool hideTaskbar</code> <a class="header-anchor" href="#property-bool-hidetaskbar" aria-label="Permalink to &quot;`property bool hideTaskbar`&quot;">​</a></h3><p>是否隐藏任务栏 当设置文件刚被创建时，默认值为<code>false</code>。</p><h3 id="property-int-colormode" tabindex="-1"><code>property int colorMode</code> <a class="header-anchor" href="#property-int-colormode" aria-label="Permalink to &quot;`property int colorMode`&quot;">​</a></h3><p>软件的颜色模式</p><h4 id="值对应意义" tabindex="-1">值对应意义 <a class="header-anchor" href="#值对应意义" aria-label="Permalink to &quot;值对应意义&quot;">​</a></h4><table tabindex="0"><thead><tr><th>值</th><th>意义</th></tr></thead><tbody><tr><td>0</td><td>浅色模式</td></tr><tr><td>1</td><td>深色模式</td></tr><tr><td>2</td><td>跟随系统</td></tr></tbody></table><p>当设置文件刚被创建时，默认值为2。</p><h3 id="property-color-primarycolor" tabindex="-1"><code>property color primaryColor</code> <a class="header-anchor" href="#property-color-primarycolor" aria-label="Permalink to &quot;`property color primaryColor`&quot;">​</a></h3><p>软件的主题色 当设置文件刚被创建时，默认值为<code>QColor(0,100,255)</code>。</p><h3 id="property-string-globalfontfamily" tabindex="-1"><code>property string globalFontFamily</code> <a class="header-anchor" href="#property-string-globalfontfamily" aria-label="Permalink to &quot;`property string globalFontFamily`&quot;">​</a></h3><p>使用全局字体家族名称 当设置文件刚被创建时，默认值为<code>微软雅黑</code>。</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="slot-str-def-notify-self-prop" tabindex="-1"><code>@Slot(str) def notify(self, prop)</code> <a class="header-anchor" href="#slot-str-def-notify-self-prop" aria-label="Permalink to &quot;`@Slot(str) def notify(self, prop)`&quot;">​</a></h3><p>使属性对应的更改信号触发一次。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本方法在设置值更改但没有应用时调用</p></div><h4 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h4><ul><li>prop: 属性名称</li></ul>',23)]))}const f=e(i,[["render",l]]);export{b as __pageData,f as default};
