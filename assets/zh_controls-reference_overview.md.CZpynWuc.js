import{_ as a,c as i,o as e,ae as t}from"./chunks/framework.bdwBUuqg.js";const c=JSON.parse('{"title":"概览","description":"","frontmatter":{"title":"概览","layout":"doc","editLink":true},"headers":[],"relativePath":"zh/controls-reference/overview.md","filePath":"zh/controls-reference/overview.md"}'),n={name:"zh/controls-reference/overview.md"};function l(h,s,p,r,d,o){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="概览" tabindex="-1">概览 <a class="header-anchor" href="#概览" aria-label="Permalink to &quot;概览&quot;">​</a></h1><h2 id="系统要求" tabindex="-1">系统要求 <a class="header-anchor" href="#系统要求" aria-label="Permalink to &quot;系统要求&quot;">​</a></h2><ul><li>Python 3.12.8以上版本</li><li>PySide 6.8.3以上版本</li><li>darkdetect</li></ul><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><p>建议先阅读<a href="https://doc.qt.io/qt-6.8/qmlapplications.html" target="_blank" rel="noreferrer">Qt官方QML文档</a></p><h2 id="开发环境搭建" tabindex="-1">开发环境搭建 <a class="header-anchor" href="#开发环境搭建" aria-label="Permalink to &quot;开发环境搭建&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Uniquenium/Uniquenium.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Uniquenium</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> requirements.txt</span></span></code></pre></div><h2 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./start</span></span></code></pre></div><h2 id="控件库unidesk" tabindex="-1">控件库UniDesk <a class="header-anchor" href="#控件库unidesk" aria-label="Permalink to &quot;控件库UniDesk&quot;">​</a></h2><p>UniDesk 是 Uniquenium 的控件库。 UniDesk 控件分为三类： 基（Base）、抽象单项和具体单项（Singleton）和元件（Element） 使用时，在qml文件前添加</p><div class="language-qml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">qml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> UniDesk</span></span></code></pre></div><h2 id="抽象单项使用方法" tabindex="-1">抽象单项使用方法 <a class="header-anchor" href="#抽象单项使用方法" aria-label="Permalink to &quot;抽象单项使用方法&quot;">​</a></h2><div class="language-qml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">qml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;全局单项名&gt;.&lt;属性名&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;全局单项名&gt;.&lt;函数名&gt;(参数)</span></span></code></pre></div><h2 id="基、具体单项、元件使用方法" tabindex="-1">基、具体单项、元件使用方法 <a class="header-anchor" href="#基、具体单项、元件使用方法" aria-label="Permalink to &quot;基、具体单项、元件使用方法&quot;">​</a></h2><div class="language-qml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">qml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//父元件的部分</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;元件名&gt;{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;属性名&gt;: &lt;属性值&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;事件（信号）名&gt;: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//处理的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;子元件名&gt;{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		//...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,16)]))}const g=a(n,[["render",l]]);export{c as __pageData,g as default};
